############################
# STEP 1 build executable binary
############################
FROM golang:alpine as builder

# Install git.
# Git is required for fetching the dependencies.
RUN apk update && apk add --no-cache git openssh

COPY . .

# Using go get.
RUN go get -d -v

# Build the Go app with CGO_ENABLED=0 so we use the pure-Go implementations for
# things like DNS resolution (so we don't build a binary that depends on system
# libraries)
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o $GOPATH/bin/main

# Create a "nobody" non-root user for the next image by crafting an /etc/passwd
# file that the next image can copy in. This is necessary since the next image
# is based on scratch, which doesn't have adduser, cat, echo, or even sh.
RUN echo "nobody:x:65534:65534:Nobody:/:" > /etc_passwd

############################
# STEP 2 build a small image
############################
# The second and final stage
FROM scratch

# Copy the binary from the builder stage
COPY --from=builder /go/bin/main /go/bin/main

# Copy the /etc_passwd file we created in the builder stage into /etc/passwd in
# the target stage. This creates a new non-root user as a security best
# practice.
COPY --from=builder /etc_passwd /etc/passwd

# Run as the new non-root by default
USER nobody

# Run the hello binary.
ENTRYPOINT ["/go/bin/main"]